{"ast":null,"code":"import { Geolocation } from '@capacitor/geolocation';\nexport default {\n  name: 'DistanceForm',\n  data() {\n    return {\n      distance: '',\n      // Speichert die eingegebene Distanz\n      submitted: false,\n      // Gibt an, ob das Formular bereits abgesendet wurde\n      location: null // Speichert den aktuellen Standort\n    };\n  },\n  methods: {\n    async handleSubmit() {\n      this.submitted = true;\n      // Hier könnte die Distanz gespeichert werden (z.B. in localStorage oder Vuex)\n      localStorage.setItem('distanceToTree', this.distance);\n      console.log(`Distanz zum Baum gespeichert: ${this.distance} Meter`);\n    },\n    async getLocation() {\n      try {\n        const position = await Geolocation.getCurrentPosition();\n        this.location = position.coords;\n        console.log('Standort abgerufen:', this.location);\n      } catch (error) {\n        console.error('Fehler beim Abrufen des Standorts:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["Geolocation","name","data","distance","submitted","location","methods","handleSubmit","localStorage","setItem","console","log","getLocation","position","getCurrentPosition","coords","error"],"sources":["C:\\Users\\madiw\\Desktop\\Hochschule\\7. Semester\\Bachelorprojekt\\projekt\\src\\components\\testapp.vue"],"sourcesContent":["<template>\r\n    <div class=\"form-container\">\r\n      <h1>Distanz zum Baum und Standort</h1>\r\n  \r\n      <form @submit.prevent=\"handleSubmit\">\r\n        <div class=\"form-group\">\r\n          <label for=\"distance\">Wie weit sind Sie vom Baum entfernt (in Metern)?</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"distance\"\r\n            v-model=\"distance\"\r\n            required\r\n            min=\"0\"\r\n            step=\"0.1\"\r\n            placeholder=\"z. B. 25.5\"\r\n          />\r\n        </div>\r\n  \r\n        <div class=\"form-group\">\r\n          <button type=\"submit\" class=\"submit-button\">Absenden</button>\r\n        </div>\r\n      </form>\r\n  \r\n      <div class=\"form-group\">\r\n        <button @click=\"getLocation\" class=\"location-button\">Standort abrufen</button>\r\n      </div>\r\n  \r\n      <!-- Anzeige des Standorts -->\r\n      <div v-if=\"location\">\r\n        <p>Aktueller Standort: {{ location.latitude }}°, {{ location.longitude }}°</p>\r\n        <p>Genauigkeit: {{ location.accuracy }} Meter</p>\r\n      </div>\r\n  \r\n      <!-- Anzeige der eingegebenen Distanz -->\r\n      <div v-if=\"submitted\">\r\n        <p>Die eingegebene Distanz zum Baum beträgt: <strong>{{ distance }} Meter</strong></p>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { Geolocation } from '@capacitor/geolocation';\r\n  \r\n  export default {\r\n    name: 'DistanceForm',\r\n    data() {\r\n      return {\r\n        distance: '', // Speichert die eingegebene Distanz\r\n        submitted: false, // Gibt an, ob das Formular bereits abgesendet wurde\r\n        location: null, // Speichert den aktuellen Standort\r\n      };\r\n    },\r\n    methods: {\r\n      async handleSubmit() {\r\n        this.submitted = true;\r\n        // Hier könnte die Distanz gespeichert werden (z.B. in localStorage oder Vuex)\r\n        localStorage.setItem('distanceToTree', this.distance);\r\n        console.log(`Distanz zum Baum gespeichert: ${this.distance} Meter`);\r\n      },\r\n  \r\n      async getLocation() {\r\n        try {\r\n          const position = await Geolocation.getCurrentPosition();\r\n          this.location = position.coords;\r\n          console.log('Standort abgerufen:', this.location);\r\n        } catch (error) {\r\n          console.error('Fehler beim Abrufen des Standorts:', error);\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Grundlegendes Styling für das Formular */\r\n  .form-container {\r\n    max-width: 400px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 8px;\r\n    background-color: #f9f9f9;\r\n  }\r\n  \r\n  h1 {\r\n    text-align: center;\r\n    font-size: 24px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  label {\r\n    font-size: 16px;\r\n    color: #333;\r\n    margin-bottom: 5px;\r\n    display: block;\r\n  }\r\n  \r\n  input {\r\n    width: 100%;\r\n    padding: 10px;\r\n    font-size: 16px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  button.submit-button, .location-button {\r\n    width: 100%;\r\n    padding: 10px;\r\n    font-size: 16px;\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  button.submit-button:hover, .location-button:hover {\r\n    background-color: #45a049;\r\n  }\r\n  \r\n  div p {\r\n    text-align: center;\r\n    font-size: 18px;\r\n    color: #333;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAyCE,SAASA,WAAU,QAAS,wBAAwB;AAEpD,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MAAE;MACdC,SAAS,EAAE,KAAK;MAAE;MAClBC,QAAQ,EAAE,IAAI,CAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,YAAYA,CAAA,EAAG;MACnB,IAAI,CAACH,SAAQ,GAAI,IAAI;MACrB;MACAI,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAACN,QAAQ,CAAC;MACrDO,OAAO,CAACC,GAAG,CAAC,iCAAiC,IAAI,CAACR,QAAQ,QAAQ,CAAC;IACrE,CAAC;IAED,MAAMS,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMb,WAAW,CAACc,kBAAkB,CAAC,CAAC;QACvD,IAAI,CAACT,QAAO,GAAIQ,QAAQ,CAACE,MAAM;QAC/BL,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACN,QAAQ,CAAC;MACnD,EAAE,OAAOW,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}