{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx } from \"vue\";\nconst _hoisted_1 = {\n  class: \"stats\"\n};\nconst _hoisted_2 = {\n  class: \"filters\"\n};\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"Meine gemessenen Bäume\", -1 /* HOISTED */)), _createCommentVNode(\" Statistiken \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"p\", null, \"Insgesamt gemessene Bäume: \" + _toDisplayString($options.totalTrees), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Durchschnittliche Höhe: \" + _toDisplayString($options.averageHeight) + \" m\", 1 /* TEXT */)]), _createCommentVNode(\" Such- und Filterleiste \"), _createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchQuery = $event),\n    placeholder: \"Baumart suchen...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedFilter = $event)\n  }, [_cache[2] || (_cache[2] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Alle Baumarten\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.uniqueSpecies, species => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: species,\n      value: species\n    }, _toDisplayString(species), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedFilter]])]), _createCommentVNode(\" Tabelle \"), _createVNode(_component_el_table, {\n    data: $options.filteredTrees,\n    style: {\n      \"width\": \"100%\"\n    }\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_table_column, {\n      prop: \"species\",\n      label: \"Baumart\",\n      width: \"180\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"height\",\n      label: \"Höhe (m)\",\n      width: \"120\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"circumference\",\n      label: \"Umfang (m)\",\n      width: \"120\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"location\",\n      label: \"Standort\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"date\",\n      label: \"Datum\",\n      width: \"150\"\n    }), _createVNode(_component_el_table_column, {\n      label: \"Aktionen\",\n      width: \"150\"\n    }, {\n      default: _withCtx(scope => [_createElementVNode(\"button\", {\n        onClick: $event => $options.editTree(scope.row)\n      }, \"Bearbeiten\", 8 /* PROPS */, _hoisted_4), _createElementVNode(\"button\", {\n        onClick: $event => $options.deleteTree(scope.row.id)\n      }, \"Löschen\", 8 /* PROPS */, _hoisted_5)]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"data\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_createCommentVNode","_hoisted_1","_toDisplayString","$options","totalTrees","averageHeight","_hoisted_2","_cache","$event","$data","searchQuery","placeholder","selectedFilter","value","_Fragment","_renderList","uniqueSpecies","species","key","_hoisted_3","_createVNode","_component_el_table","data","filteredTrees","style","default","_withCtx","_component_el_table_column","prop","label","width","scope","onClick","editTree","row","_hoisted_4","deleteTree","id","_hoisted_5","_"],"sources":["D:\\Studium\\Semester 7\\Bachlor Projekt\\Programm\\project\\src\\components\\OverviewComponent.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Meine gemessenen Bäume</h1>\r\n    <!-- Statistiken -->\r\n    <div class=\"stats\">\r\n      <p>Insgesamt gemessene Bäume: {{ totalTrees }}</p>\r\n      <p>Durchschnittliche Höhe: {{ averageHeight }} m</p>\r\n    </div>\r\n\r\n    <!-- Such- und Filterleiste -->\r\n    <div class=\"filters\">\r\n      <input v-model=\"searchQuery\" placeholder=\"Baumart suchen...\" />\r\n      <select v-model=\"selectedFilter\">\r\n        <option value=\"\">Alle Baumarten</option>\r\n        <option v-for=\"species in uniqueSpecies\" :key=\"species\" :value=\"species\">\r\n          {{ species }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n\r\n    <!-- Tabelle -->\r\n    <el-table :data=\"filteredTrees\" style=\"width: 100%\">\r\n      <el-table-column prop=\"species\" label=\"Baumart\" width=\"180\" />\r\n      <el-table-column prop=\"height\" label=\"Höhe (m)\" width=\"120\" />\r\n      <el-table-column prop=\"circumference\" label=\"Umfang (m)\" width=\"120\" />\r\n      <el-table-column prop=\"location\" label=\"Standort\" />\r\n      <el-table-column prop=\"date\" label=\"Datum\" width=\"150\" />\r\n      <el-table-column label=\"Aktionen\" width=\"150\">\r\n        <template #default=\"scope\">\r\n          <button @click=\"editTree(scope.row)\">Bearbeiten</button>\r\n          <button @click=\"deleteTree(scope.row.id)\">Löschen</button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      trees: [\r\n        { id: 1, species: 'Eiche', height: 15.5, circumference: 2.3, location: 'Waldweg 12, Berlin', date: '2024-12-01' },\r\n        { id: 2, species: 'Buche', height: 20.2, circumference: 3.1, location: 'Parkstraße 5, Hamburg', date: '2024-11-20' },\r\n      ],\r\n      searchQuery: '',\r\n      selectedFilter: '',\r\n    };\r\n  },\r\n  computed: {\r\n    totalTrees() {\r\n      return this.trees.length;\r\n    },\r\n    averageHeight() {\r\n      const totalHeight = this.trees.reduce((sum, tree) => sum + tree.height, 0);\r\n      return (totalHeight / this.trees.length).toFixed(2);\r\n    },\r\n    uniqueSpecies() {\r\n      return [...new Set(this.trees.map(tree => tree.species))];\r\n    },\r\n    filteredTrees() {\r\n      return this.trees.filter(tree => {\r\n        const matchesSearch = tree.species.toLowerCase().includes(this.searchQuery.toLowerCase());\r\n        const matchesFilter = this.selectedFilter ? tree.species === this.selectedFilter : true;\r\n        return matchesSearch && matchesFilter;\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    editTree(tree) {\r\n      alert(`Baum bearbeiten: ${tree.species}`);\r\n    },\r\n    deleteTree(id) {\r\n      this.trees = this.trees.filter(tree => tree.id !== id);\r\n    },\r\n  },\r\n};\r\nconst trees = [\r\n  {\r\n    id: 1,\r\n    species: 'Eiche',\r\n    height: 15.5,\r\n    circumference: 2.3,\r\n    location: 'Waldweg 12, Berlin',\r\n    date: '2024-12-01',\r\n  },\r\n  {\r\n    id: 2,\r\n    species: 'Buche',\r\n    height: 20.2,\r\n    circumference: 3.1,\r\n    location: 'Parkstraße 5, Hamburg',\r\n    date: '2024-11-20',\r\n  },\r\n];\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.stats {\r\n  margin-bottom: 20px;\r\n}\r\n.filters {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n.filters input,\r\n.filters select {\r\n  padding: 5px;\r\n  font-size: 16px;\r\n}\r\n</style>\r\n"],"mappings":";;EAISA,KAAK,EAAC;AAAO;;EAMbA,KAAK,EAAC;AAAS;mBAVxB;mBAAA;mBAAA;;;;uBACEC,mBAAA,CAiCM,c,0BAhCJC,mBAAA,CAA+B,YAA3B,wBAAsB,sBAC1BC,mBAAA,iBAAoB,EACpBD,mBAAA,CAGM,OAHNE,UAGM,GAFJF,mBAAA,CAAkD,WAA/C,6BAA2B,GAAAG,gBAAA,CAAGC,QAAA,CAAAC,UAAU,kBAC3CL,mBAAA,CAAoD,WAAjD,0BAAwB,GAAAG,gBAAA,CAAGC,QAAA,CAAAE,aAAa,IAAG,IAAE,gB,GAGlDL,mBAAA,4BAA+B,EAC/BD,mBAAA,CAQM,OARNO,UAQM,G,gBAPJP,mBAAA,CAA+D;IAXrE,uBAAAQ,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAWsBC,KAAA,CAAAC,WAAW,GAAAF,MAAA;IAAEG,WAAW,EAAC;iDAAzBF,KAAA,CAAAC,WAAW,E,mBAC3BX,mBAAA,CAKS;IAjBf,uBAAAQ,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAYuBC,KAAA,CAAAG,cAAc,GAAAJ,MAAA;gCAC7BT,mBAAA,CAAwC;IAAhCc,KAAK,EAAC;EAAE,GAAC,gBAAc,uB,kBAC/Bf,mBAAA,CAESgB,SAAA,QAhBjBC,WAAA,CAckCZ,QAAA,CAAAa,aAAa,EAAxBC,OAAO;yBAAtBnB,mBAAA,CAES;MAFiCoB,GAAG,EAAED,OAAO;MAAGJ,KAAK,EAAEI;wBAC3DA,OAAO,wBAfpBE,UAAA;2EAYuBV,KAAA,CAAAG,cAAc,E,KAQjCZ,mBAAA,aAAgB,EAChBoB,YAAA,CAYWC,mBAAA;IAZAC,IAAI,EAAEnB,QAAA,CAAAoB,aAAa;IAAEC,KAAmB,EAAnB;MAAA;IAAA;;IArBpCC,OAAA,EAAAC,QAAA,CAsBM,MAA8D,CAA9DN,YAAA,CAA8DO,0BAAA;MAA7CC,IAAI,EAAC,SAAS;MAACC,KAAK,EAAC,SAAS;MAACC,KAAK,EAAC;QACtDV,YAAA,CAA8DO,0BAAA;MAA7CC,IAAI,EAAC,QAAQ;MAACC,KAAK,EAAC,UAAU;MAACC,KAAK,EAAC;QACtDV,YAAA,CAAuEO,0BAAA;MAAtDC,IAAI,EAAC,eAAe;MAACC,KAAK,EAAC,YAAY;MAACC,KAAK,EAAC;QAC/DV,YAAA,CAAoDO,0BAAA;MAAnCC,IAAI,EAAC,UAAU;MAACC,KAAK,EAAC;QACvCT,YAAA,CAAyDO,0BAAA;MAAxCC,IAAI,EAAC,MAAM;MAACC,KAAK,EAAC,OAAO;MAACC,KAAK,EAAC;QACjDV,YAAA,CAKkBO,0BAAA;MALDE,KAAK,EAAC,UAAU;MAACC,KAAK,EAAC;;MAC3BL,OAAO,EAAAC,QAAA,CACwCK,KADjC,KACvBhC,mBAAA,CAAwD;QAA/CiC,OAAK,EAAAxB,MAAA,IAAEL,QAAA,CAAA8B,QAAQ,CAACF,KAAK,CAACG,GAAG;SAAG,YAAU,iBA7BzDC,UAAA,GA8BUpC,mBAAA,CAA0D;QAAjDiC,OAAK,EAAAxB,MAAA,IAAEL,QAAA,CAAAiC,UAAU,CAACL,KAAK,CAACG,GAAG,CAACG,EAAE;SAAG,SAAO,iBA9B3DC,UAAA,E;MAAAC,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}