{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { Geolocation } from '@capacitor/geolocation';\nexport default {\n  name: 'DistanceForm',\n  data() {\n    // Initialisierung\n    return {\n      distance: '',\n      submitted: false,\n      location: null\n    };\n  },\n  computed: {\n    // Karte mit gegebenem Standort ausgeben\n    iframeUrl() {\n      const {\n        latitude,\n        longitude\n      } = this.location;\n      return `https://www.openstreetmap.org/export/embed.html?bbox=${longitude}%2C${latitude}%2C${longitude}%2C${latitude}&layer=mapnik&marker=${latitude}%2C${longitude}`;\n    }\n  },\n  methods: {\n    async handleSubmit() {\n      // Umschreiben der JSON\n      this.submitted = true;\n      const data = {\n        distance: this.distance,\n        location: {\n          latitude: this.location.latitude,\n          longitude: this.location.longitude,\n          accuracy: this.location.accuracy\n        }\n      };\n      const jsonData = JSON.stringify(data, null, 2);\n      const blob = new Blob([jsonData], {\n        type: 'application/json'\n      });\n      const a = document.createElement('a');\n      a.href = URL.createObjectURL(blob);\n      a.download = 'data.json';\n      a.click();\n      URL.revokeObjectURL(a.href);\n    },\n    // Standort abrufen\n    async getLocation() {\n      try {\n        const position = await Geolocation.getCurrentPosition({\n          enableHighAccuracy: true\n        });\n        if (position.coords) {\n          this.location = position.coords;\n        } else {\n          console.log(\"Test\");\n        }\n      } catch (error) {\n        console.log(\"Test\");\n      }\n    },\n    beforeMount() {\n      this.getLocation();\n    }\n  }\n};","map":{"version":3,"names":["Geolocation","name","data","distance","submitted","location","computed","iframeUrl","latitude","longitude","methods","handleSubmit","accuracy","jsonData","JSON","stringify","blob","Blob","type","a","document","createElement","href","URL","createObjectURL","download","click","revokeObjectURL","getLocation","position","getCurrentPosition","enableHighAccuracy","coords","console","log","error","beforeMount"],"sources":["C:\\Users\\deine\\Documents\\Workspace\\project\\src\\components\\TreeForm.vue"],"sourcesContent":["<template>\r\n    <form action=\"\" method=\"POST\">\r\n      <h2 class=\"formbold-form-title\">Baum registrieren</h2>\r\n\r\n      <div class=\"formbold-input-flex\">\r\n        <div>\r\n          <label for=\"name-of-measurer\" class=\"formbold-form-label\">\r\n            Name of the Measurer*\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name-of-measurer\"\r\n            id=\"name-of-measurer\"\r\n            class=\"formbold-form-input\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label for=\"tree-type\" class=\"formbold-form-label\"> \r\n            Tree type* </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"tree-type\"\r\n            id=\"tree-type\"\r\n            class=\"formbold-form-input\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"formbold-input-flex\">\r\n        <div>\r\n          <label for=\"Tree Height\" class=\"formbold-form-label\">\r\n            Tree Height* </label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"tree-height\"\r\n            id=\"tree-height\"\r\n            class=\"formbold-form-input\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label for=\"phone\" class=\"formbold-form-label\">\r\n            Inclination in degrees* </label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"inclination-in-degrees\"\r\n            id=\"inclination-in-degrees\"\r\n            class=\"formbold-form-input\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"formbold-input-flex\">\r\n        <div>\r\n          <label for=\"trunk-diameter-in-cm\" class=\"formbold-form-label\">\r\n            Trunk Diameter in cm* </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"trunk-diameter-in-cm\"\r\n            id=\"trunk-diameter-in-cm\"\r\n            class=\"formbold-form-input\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n\r\n        <div class=\"form-group\">\r\n          <button @click=\"getLocation\" class=\"location-button\">Standort abrufen</button>\r\n        </div>\r\n\r\n        <div> \r\n          <div v-if=\"location\">\r\n            <p>Standort: {{ location.latitude }}°, {{ location.longitude }}°</p>\r\n            <p>Abweichung: {{ location.accuracy }} Meter</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Anzeige der Karte -->\r\n        <div class=\"map-container\" v-if=\"location\">\r\n          <h2>Karte mit Standort</h2>\r\n          <iframe :src=\"iframeUrl\" width=\"425\" height=\"350\" style=\"border: 1px solid black\"></iframe>\r\n          <br />\r\n        </div>\r\n\r\n        <div v-if=\"location\">\r\n          <p>Standort: {{ location.latitude }}°, {{ location.longitude }}°</p>\r\n          <p>Abweichung: {{ location.accuracy }} Meter</p>\r\n        </div>\r\n\r\n        <div v-if=\"submitted\">\r\n          <p>Die eingegebene Distanz zum Baum beträgt: <strong>{{ distance }} Meter</strong></p>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <p class=\"formbold-policy\">\r\n        privacy policy oder so\r\n        <a href=\"#\">privacy policy.</a>\r\n      </p>\r\n      <button class=\"formbold-btn\">Baum hinzufügen</button>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport { Geolocation } from '@capacitor/geolocation';\r\n\r\nexport default {\r\n  name: 'DistanceForm',\r\n  data() {\r\n    // Initialisierung\r\n    return {\r\n      distance: '',\r\n      submitted: false,\r\n      location: null,\r\n    };\r\n  },\r\n  computed: {\r\n    // Karte mit gegebenem Standort ausgeben\r\n    iframeUrl() {\r\n      const { latitude, longitude } = this.location;\r\n      return `https://www.openstreetmap.org/export/embed.html?bbox=${longitude}%2C${latitude}%2C${longitude}%2C${latitude}&layer=mapnik&marker=${latitude}%2C${longitude}`;\r\n    }\r\n  },\r\n  methods: {\r\n    async handleSubmit() {\r\n      // Umschreiben der JSON\r\n      this.submitted = true;\r\n      const data = {\r\n        distance: this.distance,\r\n        location: {\r\n          latitude: this.location.latitude,\r\n          longitude: this.location.longitude,\r\n          accuracy: this.location.accuracy,\r\n        },\r\n      };\r\n\r\n      const jsonData = JSON.stringify(data, null, 2);\r\n\r\n      const blob = new Blob([jsonData], { type: 'application/json' });\r\n\r\n      const a = document.createElement('a');\r\n      a.href = URL.createObjectURL(blob);\r\n      a.download = 'data.json';\r\n      a.click();\r\n      URL.revokeObjectURL(a.href);\r\n    },\r\n\r\n    // Standort abrufen\r\n    async getLocation() {\r\n      try {\r\n        const position = await Geolocation.getCurrentPosition({ enableHighAccuracy: true });\r\n        if (position.coords) {\r\n          this.location = position.coords;\r\n        } else {\r\n          console.log(\"Test\");\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Test\");\r\n      }\r\n    },\r\n\r\n    beforeMount() {\r\n      this.getLocation();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style>\r\n\r\n    .formbold-form-title {\r\n    color: #07074d;\r\n    font-weight: 600;\r\n    font-size: 28px;\r\n    line-height: 35px;\r\n    width: 60%;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  .formbold-form-input {\r\n    text-align: center;\r\n    width: 70%;\r\n    padding: 8px 22px;\r\n    border-radius: 5px;\r\n    border: 1px solid #dde3ec;\r\n    background: #ffffff;\r\n    font-weight: 500;\r\n    font-size: 15px;\r\n    color: #536387;\r\n    outline: none;\r\n    resize: none;\r\n  }\r\n\r\n  .formbold-input-flex {\r\n    display: flex;\r\n    gap: 5px;\r\n    margin-bottom: 15px;\r\n  }\r\n  .formbold-input-flex > div {\r\n    width: 50%;\r\n  }\r\n\r\n  .formbold-form-label {\r\n    color: #536387;\r\n    font-size: 14px;\r\n    line-height: 24px;\r\n    display: block;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .formbold-btn {\r\n    text-align: center;\r\n    width: 100%;\r\n    font-size: 16px;\r\n    border-radius: 5px;\r\n    padding: 14px 25px;\r\n    border: none;\r\n    font-weight: 500;\r\n    background-color: #6a64f1;\r\n    color: white;\r\n    cursor: pointer;\r\n    margin-top: 25px;\r\n  }\r\n  .formbold-btn:hover {\r\n    box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.05);\r\n  }\r\n\r\n</style>"],"mappings":";;;AAwGA,SAASA,WAAU,QAAS,wBAAwB;AAEpD,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAIA,CAAA,EAAG;IACL;IACA,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,KAAK;MAChBC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,SAASA,CAAA,EAAG;MACV,MAAM;QAAEC,QAAQ;QAAEC;MAAU,IAAI,IAAI,CAACJ,QAAQ;MAC7C,OAAO,wDAAwDI,SAAS,MAAMD,QAAQ,MAAMC,SAAS,MAAMD,QAAQ,wBAAwBA,QAAQ,MAAMC,SAAS,EAAE;IACtK;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,YAAYA,CAAA,EAAG;MACnB;MACA,IAAI,CAACP,SAAQ,GAAI,IAAI;MACrB,MAAMF,IAAG,GAAI;QACXC,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBE,QAAQ,EAAE;UACRG,QAAQ,EAAE,IAAI,CAACH,QAAQ,CAACG,QAAQ;UAChCC,SAAS,EAAE,IAAI,CAACJ,QAAQ,CAACI,SAAS;UAClCG,QAAQ,EAAE,IAAI,CAACP,QAAQ,CAACO;QAC1B;MACF,CAAC;MAED,MAAMC,QAAO,GAAIC,IAAI,CAACC,SAAS,CAACb,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;MAE9C,MAAMc,IAAG,GAAI,IAAIC,IAAI,CAAC,CAACJ,QAAQ,CAAC,EAAE;QAAEK,IAAI,EAAE;MAAmB,CAAC,CAAC;MAE/D,MAAMC,CAAA,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACrCF,CAAC,CAACG,IAAG,GAAIC,GAAG,CAACC,eAAe,CAACR,IAAI,CAAC;MAClCG,CAAC,CAACM,QAAO,GAAI,WAAW;MACxBN,CAAC,CAACO,KAAK,CAAC,CAAC;MACTH,GAAG,CAACI,eAAe,CAACR,CAAC,CAACG,IAAI,CAAC;IAC7B,CAAC;IAED;IACA,MAAMM,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAM7B,WAAW,CAAC8B,kBAAkB,CAAC;UAAEC,kBAAkB,EAAE;QAAK,CAAC,CAAC;QACnF,IAAIF,QAAQ,CAACG,MAAM,EAAE;UACnB,IAAI,CAAC3B,QAAO,GAAIwB,QAAQ,CAACG,MAAM;QACjC,OAAO;UACLC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QACrB;MACF,EAAE,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACrB;IACF,CAAC;IAEDE,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACR,WAAW,CAAC,CAAC;IACpB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}