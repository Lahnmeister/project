{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"table-ui\"\n};\nconst _hoisted_2 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"h1\", null, \"Meine gemessenen Bäume\", -1 /* HOISTED */)), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"Gesamtanzahl der Bäume: \" + _toDisplayString($data.trees.length), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Durchschnittliche Höhe: \" + _toDisplayString($options.averageHeight) + \" m\", 1 /* TEXT */)])]), _createCommentVNode(\" Suchfunktion \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchQuery = $event),\n    placeholder: \"Baumart suchen\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _createCommentVNode(\" Tabelle \"), _createElementVNode(\"table\", _hoisted_1, [_cache[2] || (_cache[2] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Bild\"), _createElementVNode(\"th\", null, \"Baumart\"), _createElementVNode(\"th\", null, \"Höhe (m)\"), _createElementVNode(\"th\", null, \"Standort\"), _createElementVNode(\"th\", null, \"Datum\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredTrees, tree => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: tree.id\n    }, [_createElementVNode(\"td\", null, [_createElementVNode(\"img\", {\n      src: tree.imageUrl,\n      alt: \"Bild von {{ tree.species }}\",\n      class: \"tree-image\"\n    }, null, 8 /* PROPS */, _hoisted_2)]), _createElementVNode(\"td\", null, _toDisplayString(tree.species), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(tree.height), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(tree.location), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(tree.date), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createCommentVNode(\" Statistiken \")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_createElementVNode","_toDisplayString","$data","trees","length","$options","averageHeight","_createCommentVNode","_cache","$event","searchQuery","placeholder","_hoisted_1","_renderList","filteredTrees","tree","key","id","src","imageUrl","alt","_hoisted_2","species","height","location","date"],"sources":["D:\\Studium\\Semester 7\\Bachlor Projekt\\Programm\\project\\src\\components\\OverviewComponent.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Meine gemessenen Bäume</h1>\r\n    <div>\r\n      <p>Gesamtanzahl der Bäume: {{ trees.length }}</p>\r\n      <p>Durchschnittliche Höhe: {{ averageHeight }} m</p>\r\n    </div>\r\n  </div>\r\n    <!-- Suchfunktion -->\r\n    <input v-model=\"searchQuery\" placeholder=\"Baumart suchen\" />\r\n\r\n    <!-- Tabelle -->\r\n    <table class=\"table-ui\">\r\n      <thead>\r\n        <tr>\r\n          <th>Bild</th>\r\n          <th>Baumart</th>\r\n          <th>Höhe (m)</th>\r\n          <th>Standort</th>\r\n          <th>Datum</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"tree in filteredTrees\" :key=\"tree.id\">\r\n          <td><img :src=\"tree.imageUrl\" alt=\"Bild von {{ tree.species }}\" class=\"tree-image\" /></td>\r\n          <td>{{ tree.species }}</td>\r\n          <td>{{ tree.height }}</td>\r\n          <td>{{ tree.location }}</td>\r\n          <td>{{ tree.date }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Statistiken -->\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      searchQuery: '',\r\n      trees: [\r\n        { id: 1, species: 'Eiche', height: 15.5, location: 'Fulda', date: '2024-12-01', imageUrl: require('@/assets/img/Eiche.jpg') },\r\n        { id: 2, species: 'Buche', height: 20.2, location: 'Berlin', date: '2024-11-20', imageUrl: require('@/assets/img/Buche.jpg') },\r\n        { id: 3, species: 'Ahorn', height: 10.8, location: 'Hamburg', date: '2024-12-05', imageUrl: require('@/assets/img/Ahorn.jpg') },\r\n        { id: 4, species: 'Kirsche', height: 30.2, location: 'München', date: '2024-12-05', imageUrl: require('@/assets/img/Kirsche.jpg') }\r\n      ],\r\n    };\r\n  },\r\n  computed: {\r\n    filteredTrees() {\r\n      return this.trees.filter(tree =>\r\n        tree.species.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n    averageHeight() {\r\n      if (!this.trees.length) return 0;\r\n      const totalHeight = this.trees.reduce((sum, tree) => sum + tree.height, 0);\r\n      return (totalHeight / this.trees.length).toFixed(2);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ntable {\r\n  margin-top: 20px;\r\n}\r\n\r\nth, td {\r\n  border: 1px solid black;\r\n  padding: 10px;\r\n}\r\n\r\nth {\r\n  background-color: #f4f4f4;\r\n}\r\n\r\ntr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.table-ui {\r\n  border: 1px solid black;\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  text-align: left;\r\n}\r\n\r\n.tree-image {\r\n  width: 100px;\r\n  height: 100px;\r\n  object-fit: cover; /* Behält das Verhältnis bei und schneidet das Bild zu */\r\n}\r\n</style>\r\n"],"mappings":";;EAYWA,KAAK,EAAC;AAAU;mBAZ3B;;uBAAAC,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CAMM,c,0BALJA,mBAAA,CAA+B,YAA3B,wBAAsB,sBAC1BA,mBAAA,CAGM,cAFJA,mBAAA,CAAiD,WAA9C,0BAAwB,GAAAC,gBAAA,CAAGC,KAAA,CAAAC,KAAK,CAACC,MAAM,kBAC1CJ,mBAAA,CAAoD,WAAjD,0BAAwB,GAAAC,gBAAA,CAAGI,QAAA,CAAAC,aAAa,IAAG,IAAE,gB,KAGlDC,mBAAA,kBAAqB,E,gBACrBP,mBAAA,CAA4D;IAThE,uBAAAQ,MAAA,QAAAA,MAAA,MAAAC,MAAA,IASoBP,KAAA,CAAAQ,WAAW,GAAAD,MAAA;IAAEE,WAAW,EAAC;iDAAzBT,KAAA,CAAAQ,WAAW,E,GAE3BH,mBAAA,aAAgB,EAChBP,mBAAA,CAmBQ,SAnBRY,UAmBQ,G,0BAlBNZ,mBAAA,CAQQ,gBAPNA,mBAAA,CAMK,aALHA,mBAAA,CAAa,YAAT,MAAI,GACRA,mBAAA,CAAgB,YAAZ,SAAO,GACXA,mBAAA,CAAiB,YAAb,UAAQ,GACZA,mBAAA,CAAiB,YAAb,UAAQ,GACZA,mBAAA,CAAc,YAAV,OAAK,E,wBAGbA,mBAAA,CAQQ,iB,kBAPNF,mBAAA,CAMKC,SAAA,QA7Bbc,WAAA,CAuB2BR,QAAA,CAAAS,aAAa,EAArBC,IAAI;yBAAfjB,mBAAA,CAMK;MAN8BkB,GAAG,EAAED,IAAI,CAACE;QAC3CjB,mBAAA,CAA0F,aAAtFA,mBAAA,CAAiF;MAA3EkB,GAAG,EAAEH,IAAI,CAACI,QAAQ;MAAEC,GAAG,EAAC,6BAA6B;MAACvB,KAAK,EAAC;4BAxBhFwB,UAAA,E,GAyBUrB,mBAAA,CAA2B,YAAAC,gBAAA,CAApBc,IAAI,CAACO,OAAO,kBACnBtB,mBAAA,CAA0B,YAAAC,gBAAA,CAAnBc,IAAI,CAACQ,MAAM,kBAClBvB,mBAAA,CAA4B,YAAAC,gBAAA,CAArBc,IAAI,CAACS,QAAQ,kBACpBxB,mBAAA,CAAwB,YAAAC,gBAAA,CAAjBc,IAAI,CAACU,IAAI,iB;sCAKtBlB,mBAAA,iBAAoB,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}