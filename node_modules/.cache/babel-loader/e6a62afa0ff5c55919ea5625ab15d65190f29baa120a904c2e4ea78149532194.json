{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  action: \"\",\n  method: \"POST\"\n};\nconst _hoisted_2 = {\n  class: \"form-group\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"map-container\"\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", _hoisted_1, [_cache[4] || (_cache[4] = _createStaticVNode(\"<h2 class=\\\"formbold-form-title\\\">Baum registrieren</h2><div class=\\\"formbold-input-flex\\\"><div><label for=\\\"name-of-measurer\\\" class=\\\"formbold-form-label\\\"> Name of the Measurer* </label><input type=\\\"text\\\" name=\\\"name-of-measurer\\\" id=\\\"name-of-measurer\\\" class=\\\"formbold-form-input\\\"></div><div><label for=\\\"tree-type\\\" class=\\\"formbold-form-label\\\"> Tree type* </label><input type=\\\"text\\\" name=\\\"tree-type\\\" id=\\\"tree-type\\\" class=\\\"formbold-form-input\\\"></div></div><div class=\\\"formbold-input-flex\\\"><div><label for=\\\"Tree Height\\\" class=\\\"formbold-form-label\\\"> Tree Height* </label><input type=\\\"number\\\" name=\\\"tree-height\\\" id=\\\"tree-height\\\" class=\\\"formbold-form-input\\\"></div><div><label for=\\\"phone\\\" class=\\\"formbold-form-label\\\"> Inclination in degrees* </label><input type=\\\"number\\\" name=\\\"inclination-in-degrees\\\" id=\\\"inclination-in-degrees\\\" class=\\\"formbold-form-input\\\"></div></div><div class=\\\"formbold-input-flex\\\"><div><label for=\\\"trunk-diameter-in-cm\\\" class=\\\"formbold-form-label\\\"> Trunk Diameter in cm* </label><input type=\\\"text\\\" name=\\\"trunk-diameter-in-cm\\\" id=\\\"trunk-diameter-in-cm\\\" class=\\\"formbold-form-input\\\"></div></div>\", 4)), _createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.getLocation && $options.getLocation(...args)),\n    class: \"location-button\"\n  }, \"Standort abrufen\")]), _createElementVNode(\"div\", null, [$data.location ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"p\", null, \"Standort: \" + _toDisplayString($data.location.latitude) + \"°, \" + _toDisplayString($data.location.longitude) + \"°\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Abweichung: \" + _toDisplayString($data.location.accuracy) + \" Meter\", 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Anzeige der Karte \"), $data.location ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"Karte mit Standort\", -1 /* HOISTED */)), _createElementVNode(\"iframe\", {\n    src: $options.iframeUrl,\n    width: \"425\",\n    height: \"350\",\n    style: {\n      \"border\": \"1px solid black\"\n    }\n  }, null, 8 /* PROPS */, _hoisted_5), _cache[2] || (_cache[2] = _createElementVNode(\"br\", null, null, -1 /* HOISTED */))])) : _createCommentVNode(\"v-if\", true), $data.location ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"p\", null, \"Standort: \" + _toDisplayString($data.location.latitude) + \"°, \" + _toDisplayString($data.location.longitude) + \"°\", 1 /* TEXT */), _createElementVNode(\"p\", null, \"Abweichung: \" + _toDisplayString($data.location.accuracy) + \" Meter\", 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), $data.submitted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createTextVNode(\"Die eingegebene Distanz zum Baum beträgt: \")), _createElementVNode(\"strong\", null, _toDisplayString($data.distance) + \" Meter\", 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)]), _cache[5] || (_cache[5] = _createElementVNode(\"p\", {\n    class: \"formbold-policy\"\n  }, [_createTextVNode(\" privacy policy oder so \"), _createElementVNode(\"a\", {\n    href: \"#\"\n  }, \"privacy policy.\")], -1 /* HOISTED */)), _cache[6] || (_cache[6] = _createElementVNode(\"button\", {\n    class: \"formbold-btn\"\n  }, \"Baum hinzufügen\", -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["action","method","class","key","_createElementBlock","_hoisted_1","_createStaticVNode","_createElementVNode","_hoisted_2","onClick","_cache","args","$options","getLocation","$data","location","_hoisted_3","_toDisplayString","latitude","longitude","accuracy","_createCommentVNode","_hoisted_4","src","iframeUrl","width","height","style","_hoisted_5","_hoisted_6","submitted","_hoisted_7","_createTextVNode","distance","href"],"sources":["C:\\Users\\deine\\Documents\\Workspace\\project\\src\\components\\TreeForm.vue"],"sourcesContent":["<template>\r\n    <form action=\"\" method=\"POST\">\r\n      <h2 class=\"formbold-form-title\">Baum registrieren</h2>\r\n\r\n      <div class=\"formbold-input-flex\">\r\n        <div>\r\n          <label for=\"name-of-measurer\" class=\"formbold-form-label\">\r\n            Name of the Measurer*\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name-of-measurer\"\r\n            id=\"name-of-measurer\"\r\n            class=\"formbold-form-input\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label for=\"tree-type\" class=\"formbold-form-label\"> \r\n            Tree type* </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"tree-type\"\r\n            id=\"tree-type\"\r\n            class=\"formbold-form-input\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"formbold-input-flex\">\r\n        <div>\r\n          <label for=\"Tree Height\" class=\"formbold-form-label\">\r\n            Tree Height* </label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"tree-height\"\r\n            id=\"tree-height\"\r\n            class=\"formbold-form-input\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label for=\"phone\" class=\"formbold-form-label\">\r\n            Inclination in degrees* </label>\r\n          <input\r\n            type=\"number\"\r\n            name=\"inclination-in-degrees\"\r\n            id=\"inclination-in-degrees\"\r\n            class=\"formbold-form-input\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"formbold-input-flex\">\r\n        <div>\r\n          <label for=\"trunk-diameter-in-cm\" class=\"formbold-form-label\">\r\n            Trunk Diameter in cm* </label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"trunk-diameter-in-cm\"\r\n            id=\"trunk-diameter-in-cm\"\r\n            class=\"formbold-form-input\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n\r\n        <div class=\"form-group\">\r\n          <button @click=\"getLocation\" class=\"location-button\">Standort abrufen</button>\r\n        </div>\r\n\r\n        <div> \r\n          <div v-if=\"location\">\r\n            <p>Standort: {{ location.latitude }}°, {{ location.longitude }}°</p>\r\n            <p>Abweichung: {{ location.accuracy }} Meter</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Anzeige der Karte -->\r\n        <div class=\"map-container\" v-if=\"location\">\r\n          <h2>Karte mit Standort</h2>\r\n          <iframe :src=\"iframeUrl\" width=\"425\" height=\"350\" style=\"border: 1px solid black\"></iframe>\r\n          <br />\r\n        </div>\r\n\r\n        <div v-if=\"location\">\r\n          <p>Standort: {{ location.latitude }}°, {{ location.longitude }}°</p>\r\n          <p>Abweichung: {{ location.accuracy }} Meter</p>\r\n        </div>\r\n\r\n        <div v-if=\"submitted\">\r\n          <p>Die eingegebene Distanz zum Baum beträgt: <strong>{{ distance }} Meter</strong></p>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <p class=\"formbold-policy\">\r\n        privacy policy oder so\r\n        <a href=\"#\">privacy policy.</a>\r\n      </p>\r\n      <button class=\"formbold-btn\">Baum hinzufügen</button>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport { Geolocation } from '@capacitor/geolocation';\r\n\r\nexport default {\r\n  name: 'DistanceForm',\r\n  data() {\r\n    // Initialisierung\r\n    return {\r\n      distance: '',\r\n      submitted: false,\r\n      location: null,\r\n    };\r\n  },\r\n  computed: {\r\n    // Karte mit gegebenem Standort ausgeben\r\n    iframeUrl() {\r\n      const { latitude, longitude } = this.location;\r\n      return `https://www.openstreetmap.org/export/embed.html?bbox=${longitude}%2C${latitude}%2C${longitude}%2C${latitude}&layer=mapnik&marker=${latitude}%2C${longitude}`;\r\n    }\r\n  },\r\n  methods: {\r\n    async handleSubmit() {\r\n      // Umschreiben der JSON\r\n      this.submitted = true;\r\n      const data = {\r\n        distance: this.distance,\r\n        location: {\r\n          latitude: this.location.latitude,\r\n          longitude: this.location.longitude,\r\n          accuracy: this.location.accuracy,\r\n        },\r\n      };\r\n\r\n      const jsonData = JSON.stringify(data, null, 2);\r\n\r\n      const blob = new Blob([jsonData], { type: 'application/json' });\r\n\r\n      const a = document.createElement('a');\r\n      a.href = URL.createObjectURL(blob);\r\n      a.download = 'data.json';\r\n      a.click();\r\n      URL.revokeObjectURL(a.href);\r\n    },\r\n\r\n    // Standort abrufen\r\n    async getLocation() {\r\n      try {\r\n        const position = await Geolocation.getCurrentPosition({ enableHighAccuracy: true });\r\n        if (position.coords) {\r\n          this.location = position.coords;\r\n        } else {\r\n          console.log(\"Test\");\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Test\");\r\n      }\r\n    },\r\n\r\n    beforeMount() {\r\n      this.getLocation();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style>\r\n\r\n    .formbold-form-title {\r\n    color: #07074d;\r\n    font-weight: 600;\r\n    font-size: 28px;\r\n    line-height: 35px;\r\n    width: 60%;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  .formbold-form-input {\r\n    text-align: center;\r\n    width: 70%;\r\n    padding: 8px 22px;\r\n    border-radius: 5px;\r\n    border: 1px solid #dde3ec;\r\n    background: #ffffff;\r\n    font-weight: 500;\r\n    font-size: 15px;\r\n    color: #536387;\r\n    outline: none;\r\n    resize: none;\r\n  }\r\n\r\n  .formbold-input-flex {\r\n    display: flex;\r\n    gap: 5px;\r\n    margin-bottom: 15px;\r\n  }\r\n  .formbold-input-flex > div {\r\n    width: 50%;\r\n  }\r\n\r\n  .formbold-form-label {\r\n    color: #536387;\r\n    font-size: 14px;\r\n    line-height: 24px;\r\n    display: block;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .formbold-btn {\r\n    text-align: center;\r\n    width: 100%;\r\n    font-size: 16px;\r\n    border-radius: 5px;\r\n    padding: 14px 25px;\r\n    border: none;\r\n    font-weight: 500;\r\n    background-color: #6a64f1;\r\n    color: white;\r\n    cursor: pointer;\r\n    margin-top: 25px;\r\n  }\r\n  .formbold-btn:hover {\r\n    box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.05);\r\n  }\r\n\r\n</style>"],"mappings":";;EACUA,MAAM,EAAC,EAAE;EAACC,MAAM,EAAC;;;EAiEdC,KAAK,EAAC;AAAY;;EAlE/BC,GAAA;AAAA;;EAAAA,GAAA;EA8EaD,KAAK,EAAC;;mBA9EnB;;EAAAC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACIC,mBAAA,CAmGK,QAnGLC,UAmGK,G,0BApGTC,kBAAA,ypCAgEMC,mBAAA,CA6BM,cA3BJA,mBAAA,CAEM,OAFNC,UAEM,GADJD,mBAAA,CAA8E;IAArEE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAET,KAAK,EAAC;KAAkB,kBAAgB,E,GAGvEK,mBAAA,CAKM,cAJOO,KAAA,CAAAC,QAAQ,I,cAAnBX,mBAAA,CAGM,OA1EhBY,UAAA,GAwEYT,mBAAA,CAAoE,WAAjE,YAAU,GAAAU,gBAAA,CAAGH,KAAA,CAAAC,QAAQ,CAACG,QAAQ,IAAG,KAAG,GAAAD,gBAAA,CAAGH,KAAA,CAAAC,QAAQ,CAACI,SAAS,IAAG,GAAC,iBAChEZ,mBAAA,CAAgD,WAA7C,cAAY,GAAAU,gBAAA,CAAGH,KAAA,CAAAC,QAAQ,CAACK,QAAQ,IAAG,QAAM,gB,KAzExDC,mBAAA,e,GA6EQA,mBAAA,uBAA0B,EACOP,KAAA,CAAAC,QAAQ,I,cAAzCX,mBAAA,CAIM,OAJNkB,UAIM,G,0BAHJf,mBAAA,CAA2B,YAAvB,oBAAkB,sBACtBA,mBAAA,CAA2F;IAAlFgB,GAAG,EAAEX,QAAA,CAAAY,SAAS;IAAEC,KAAK,EAAC,KAAK;IAACC,MAAM,EAAC,KAAK;IAACC,KAA+B,EAA/B;MAAA;IAAA;0BAhF5DC,UAAA,G,0BAiFUrB,mBAAA,CAAM,qC,KAjFhBc,mBAAA,gBAoFmBP,KAAA,CAAAC,QAAQ,I,cAAnBX,mBAAA,CAGM,OAvFdyB,UAAA,GAqFUtB,mBAAA,CAAoE,WAAjE,YAAU,GAAAU,gBAAA,CAAGH,KAAA,CAAAC,QAAQ,CAACG,QAAQ,IAAG,KAAG,GAAAD,gBAAA,CAAGH,KAAA,CAAAC,QAAQ,CAACI,SAAS,IAAG,GAAC,iBAChEZ,mBAAA,CAAgD,WAA7C,cAAY,GAAAU,gBAAA,CAAGH,KAAA,CAAAC,QAAQ,CAACK,QAAQ,IAAG,QAAM,gB,KAtFtDC,mBAAA,gBAyFmBP,KAAA,CAAAgB,SAAS,I,cAApB1B,mBAAA,CAEM,OA3Fd2B,UAAA,GA0FUxB,mBAAA,CAAsF,Y,0BA1FhGyB,gBAAA,CA0Fa,4CAA0C,IAAAzB,mBAAA,CAAqC,gBAAAU,gBAAA,CAA1BH,KAAA,CAAAmB,QAAQ,IAAG,QAAM,gB,OA1FnFZ,mBAAA,e,6BA+FMd,mBAAA,CAGI;IAHDL,KAAK,EAAC;EAAiB,IA/FhC8B,gBAAA,CA+FiC,0BAEzB,GAAAzB,mBAAA,CAA+B;IAA5B2B,IAAI,EAAC;EAAG,GAAC,iBAAe,E,gDAE7B3B,mBAAA,CAAqD;IAA7CL,KAAK,EAAC;EAAc,GAAC,iBAAe,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}