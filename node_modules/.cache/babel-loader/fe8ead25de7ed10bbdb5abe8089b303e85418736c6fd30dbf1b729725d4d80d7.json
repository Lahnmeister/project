{"ast":null,"code":"//import axios from 'axios'\n\nexport default {\n  name: 'RegisterComponent',\n  data() {\n    return {\n      username: '',\n      email: '',\n      password: '',\n      password_confirm: '',\n      errorMessage: '',\n      successMessage: ''\n    };\n  },\n  methods: {\n    validatePassword(password) {\n      const minLength = 8;\n      const hasUpperCase = /[A-Z]/.test(password);\n      const hasLowerCase = /[a-z]/.test(password);\n      const hasNumber = /[0-9]/.test(password);\n      const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n      if (password.length < minLength) {\n        return \"Password must be at least 8 characters long.\";\n      }\n      if (!hasUpperCase) {\n        return \"Password must contain at least one uppercase letter.\";\n      }\n      if (!hasLowerCase) {\n        return \"Password must contain at least one lowercase letter.\";\n      }\n      if (!hasNumber) {\n        return \"Password must contain at least one number.\";\n      }\n      if (!hasSpecialChar) {\n        return \"Password must contain at least one special character.\";\n      }\n      return null; // No errors\n    },\n    handleSubmit() {\n      //Checking the password requirements\n      const passwordError = this.validatePassword(this.password);\n      if (passwordError) {\n        this.errorMessage = passwordError;\n        this.successMessage = '';\n        return;\n      }\n\n      //Check if password is the same\n      if (this.password !== this.password_confirm) {\n        this.errorMessage = \"The passwords don't match.\";\n        this.successMessage = '';\n        return;\n      }\n      const data = {\n        username: this.username,\n        email: this.email,\n        password: this.password\n      };\n      console.log(data);\n      // axios.post('http://localhost:8100/register',data)\n      //     .then(\n      //         res => {\n      //             console.log(res)\n      //         }\n      //     ).catch(\n      //         err =>{\n      //             console.log(err)\n      //         }\n      //     )\n    }\n  }\n};","map":{"version":3,"names":["name","data","username","email","password","password_confirm","errorMessage","successMessage","methods","validatePassword","minLength","hasUpperCase","test","hasLowerCase","hasNumber","hasSpecialChar","length","handleSubmit","passwordError","console","log"],"sources":["D:\\Studium\\Semester 7\\Bachlor Projekt\\Programm\\project\\src\\components\\RegisterComponent.vue"],"sourcesContent":["<template>\r\n    <form @submit.prevent=\"handleSubmit\">\r\n        <h3>Sign Up</h3>\r\n\r\n        <div class=\"\">\r\n            <label>Username</label>\r\n            <input type=\"text\" v-model=\"username\" class=\"\" placeholder=\"Username\" required>\r\n        </div>\r\n\r\n        <div class=\"\">\r\n            <label>Email</label>\r\n            <input type=\"email\" v-model=\"email\" class=\"\" placeholder=\"Email\" required>\r\n        </div>\r\n\r\n        <div class=\"\">\r\n            <label>Password</label>\r\n            <input type=\"password\" v-model=\"password\" class=\"\" placeholder=\"Password\" required>\r\n        </div> \r\n\r\n        <div class=\"\">\r\n            <label>Confirm Password</label>\r\n            <input type=\"password\" v-model=\"password_confirm\" class=\"\" placeholder=\"Confirm Password\" required>\r\n        </div>\r\n\r\n        <div v-if=\"errorMessage\" class=\"alert alert-danger\">\r\n            {{ errorMessage }}\r\n        </div>\r\n        <div v-if=\"successMessage\" class=\"alert alert-success\">\r\n            {{ successMessage }}\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"\">Sign Up</button>\r\n    </form>\r\n    \r\n</template>\r\n\r\n<script>\r\n\r\n    //import axios from 'axios'\r\n\r\n    export default{\r\n        name: 'RegisterComponent',\r\n        data(){\r\n            return{\r\n                username:'',\r\n                email: '',\r\n                password: '',\r\n                password_confirm: '',\r\n                errorMessage: '',\r\n                successMessage: ''\r\n            }\r\n        },\r\n        methods: {\r\n            validatePassword(password){\r\n                const minLength = 8;\r\n                const hasUpperCase = /[A-Z]/.test(password);\r\n                const hasLowerCase = /[a-z]/.test(password);\r\n                const hasNumber = /[0-9]/.test(password);\r\n                const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n\r\n                if(password.length < minLength){\r\n                    return \"Password must be at least 8 characters long.\";\r\n                }\r\n                if (!hasUpperCase) {\r\n                return \"Password must contain at least one uppercase letter.\";\r\n                }\r\n                if (!hasLowerCase) {\r\n                    return \"Password must contain at least one lowercase letter.\";\r\n                }\r\n                if (!hasNumber) {\r\n                    return \"Password must contain at least one number.\";\r\n                }\r\n                if (!hasSpecialChar) {\r\n                    return \"Password must contain at least one special character.\";\r\n                }\r\n                return null; // No errors\r\n            },\r\n\r\n\r\n            handleSubmit(){\r\n                //Checking the password requirements\r\n                const passwordError = this.validatePassword(this.password);\r\n                if(passwordError){\r\n                    this.errorMessage = passwordError;\r\n                    this.successMessage = '';\r\n                    return\r\n                }\r\n\r\n                //Check if password is the same\r\n                if(this.password !== this.password_confirm){\r\n                    this.errorMessage =\"The passwords don't match.\"\r\n                    this.successMessage = '';\r\n                    return\r\n                }\r\n                \r\n\r\n\r\n\r\n                const data = {\r\n                    username: this.username,\r\n                    email: this.email,\r\n                    password: this.password\r\n                }\r\n\r\n                console.log(data)\r\n                // axios.post('http://localhost:8100/register',data)\r\n                //     .then(\r\n                //         res => {\r\n                //             console.log(res)\r\n                //         }\r\n                //     ).catch(\r\n                //         err =>{\r\n                //             console.log(err)\r\n                //         }\r\n                //     )\r\n            }\r\n        }\r\n    }\r\n\r\n</script>"],"mappings":"AAsCI;;AAEA,eAAc;EACVA,IAAI,EAAE,mBAAmB;EACzBC,IAAIA,CAAA,EAAE;IACF,OAAM;MACFC,QAAQ,EAAC,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,gBAAgB,EAAE,EAAE;MACpBC,YAAY,EAAE,EAAE;MAChBC,cAAc,EAAE;IACpB;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,gBAAgBA,CAACL,QAAQ,EAAC;MACtB,MAAMM,SAAQ,GAAI,CAAC;MACnB,MAAMC,YAAW,GAAI,OAAO,CAACC,IAAI,CAACR,QAAQ,CAAC;MAC3C,MAAMS,YAAW,GAAI,OAAO,CAACD,IAAI,CAACR,QAAQ,CAAC;MAC3C,MAAMU,SAAQ,GAAI,OAAO,CAACF,IAAI,CAACR,QAAQ,CAAC;MACxC,MAAMW,cAAa,GAAI,wBAAwB,CAACH,IAAI,CAACR,QAAQ,CAAC;MAE9D,IAAGA,QAAQ,CAACY,MAAK,GAAIN,SAAS,EAAC;QAC3B,OAAO,8CAA8C;MACzD;MACA,IAAI,CAACC,YAAY,EAAE;QACnB,OAAO,sDAAsD;MAC7D;MACA,IAAI,CAACE,YAAY,EAAE;QACf,OAAO,sDAAsD;MACjE;MACA,IAAI,CAACC,SAAS,EAAE;QACZ,OAAO,4CAA4C;MACvD;MACA,IAAI,CAACC,cAAc,EAAE;QACjB,OAAO,uDAAuD;MAClE;MACA,OAAO,IAAI,EAAE;IACjB,CAAC;IAGDE,YAAYA,CAAA,EAAE;MACV;MACA,MAAMC,aAAY,GAAI,IAAI,CAACT,gBAAgB,CAAC,IAAI,CAACL,QAAQ,CAAC;MAC1D,IAAGc,aAAa,EAAC;QACb,IAAI,CAACZ,YAAW,GAAIY,aAAa;QACjC,IAAI,CAACX,cAAa,GAAI,EAAE;QACxB;MACJ;;MAEA;MACA,IAAG,IAAI,CAACH,QAAO,KAAM,IAAI,CAACC,gBAAgB,EAAC;QACvC,IAAI,CAACC,YAAW,GAAG,4BAA2B;QAC9C,IAAI,CAACC,cAAa,GAAI,EAAE;QACxB;MACJ;MAKA,MAAMN,IAAG,GAAI;QACTC,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBC,QAAQ,EAAE,IAAI,CAACA;MACnB;MAEAe,OAAO,CAACC,GAAG,CAACnB,IAAI;MAChB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}